#!groovy

def PLATFORM_MAP = [
    'arm_linux' : [
        'SPEC' : 'linux_arm',
        'LABEL' : 'ci.role.test&&sw.os.linux&&hw.arch.aarch32',
    ],
    'aarch64_mac' : [
        'SPEC' : 'osx_aarch64',
        'LABEL' : 'ci.role.test&&hw.arch.aarch64&&(sw.os.osx||sw.os.mac)',
    ],
    'aarch64_linux' : [
        'SPEC' : 'linux_aarch64',
        'LABEL' : 'ci.role.test&&sw.os.linux&&hw.arch.aarch64',
    ],
    'aarch64_windows' : [
        'SPEC' : 'windows_aarch64',
        'LABEL' : 'ci.role.test&&sw.os.windows&&hw.arch.aarch64',
    ],
    'aarch64_alpine-linux' : [
        'SPEC' : 'alpine-linux_aarch64',
        'LABEL' : 'ci.role.test&&hw.arch.aarch64&&sw.os.alpine-linux',
    ],
    'ppc32_aix' : [
        'SPEC' : 'aix_ppc',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64&&sw.os.aix',
    ],
    'ppc32_linux' : [
        'SPEC' : 'linux_ppc',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64&&sw.os.linux',
    ],
    'ppc64_aix' : [
        'SPEC' : 'aix_ppc-64',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64&&sw.os.aix',
    ],
    'ppc64_linux' : [
        'SPEC' : 'linux_ppc-64',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64&&sw.os.linux',
    ],
    'ppc64le_linux' : [
        'SPEC' : 'linux_ppc-64_le',
        'LABEL' : 'ci.role.test&&hw.arch.ppc64le&&sw.os.linux',
        'DynamicAgents' : ['fyre']
    ],
    'riscv64_linux' : [
        'SPEC' : 'linux_riscv64',
        'LABEL' : 'ci.role.test&&sw.os.linux&&hw.arch.riscv',
        'DockerAgents' : ['default']
    ],
    'riscv64_linux_xl' : [
        'SPEC' : 'linux_riscv64',
        'LABEL' : 'ci.role.test&&sw.os.linux&&hw.arch.riscv&&hw.bits.64',
    ],
    's390_linux' : [
        'SPEC' : 'linux_390',
        'LABEL' : 'ci.role.test&&hw.arch.s390x&&sw.os.linux&&hw.bits.32',
    ],
    's390x_linux_zt' : [
        'SPEC' : 'linux_390-64_zt',
        'LABEL' : 'ci.role.test&&hw.arch.znext&&sw.os.linux',
    ],
    's390x_linux' : [
        'SPEC' : 'linux_390-64',
        'LABEL' : 'ci.role.test&&hw.arch.s390x&&sw.os.linux',
    ],
    's390x_zos' : [
        'SPEC' : 'zos_390-64',
        'LABEL' : 'ci.role.test&&hw.arch.s390x&&sw.os.zos',
    ],
    's390x_zos_xl' : [
        'SPEC' : 'zos_390-64',
        'LABEL' : 'ci.role.test&&hw.arch.s390x&&sw.os.zos',
    ],
    's390x_zos_zt' : [
        'SPEC' : 'zos_390-64_zt',
        'LABEL' : 'ci.role.test&&hw.arch.znext&&sw.os.zos',
    ],
    's390_zos_zt' : [
        'SPEC' : 'zos_390_zt',
        'LABEL' : 'ci.role.test&&hw.arch.znext&&sw.os.zos',
    ],
    's390_zos' : [
        'SPEC' : 'zos_390',
        'LABEL' : 'ci.role.test&&hw.arch.s390x&&sw.os.zos',
    ],
    'sparcv9_solaris' : [
        'SPEC' : 'sunos_sparcv9-64',
        'LABEL' : 'ci.role.test&&hw.arch.sparcv9&&sw.os.sunos',
    ],
    'x86-64_solaris' : [
        'SPEC' : 'sunos_x86-64',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.sunos',
    ],
    'x86-64_alpine-linux' : [
        'SPEC' : 'alpine-linux_x86-64',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.alpine-linux',
    ],
    'x86-32_linux' : [
        'SPEC' : 'linux_x86',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.linux',
    ],
    'x86-32_windows' : [
        'SPEC' : 'win_x86',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.windows',
    ],
    'x86-64_linux' : [
        'SPEC' : 'linux_x86-64',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.linux',
        'DynamicAgents' : ['azure', 'fyre']
    ],
    'x86-64_mac' : [
        'SPEC' : 'osx_x86-64',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&(sw.os.osx||sw.os.mac)',
    ],
    'x86-64_windows' : [
        'SPEC' : 'win_x86-64',
        'LABEL' : 'ci.role.test&&hw.arch.x86&&sw.os.windows',
    ],
]

def PLATFORMS = params.PLATFORM.trim().split("\\s*,\\s*");

timestamps{
    stage('Setup') {
            if (PLATFORM_MAP.containsKey(params.PLATFORM)) {
                    SPEC = PLATFORM_MAP[params.PLATFORM]["SPEC"]
                    if (params.LABEL) {
                        LABEL = params.LABEL
                    } else {
                        LABEL = PLATFORM_MAP[params.PLATFORM]["LABEL"]
                    }
            node(LABEL) {
                echo "clone the SCM GIT repo"
                try {
                    def retry_count = 0
                    def sleep_time = 180

                    // if (params.PLATFORM.contains('zos')) {
                    //     /* Ensure correct CC env */
                    //     env._CC_CCMODE = '1'
                    //     env._CXX_CCMODE = '1'
                    //     env._C89_CCMODE = '1'

                    //     def gitConfig = scm.getUserRemoteConfigs()[0]
                    //     def SCM_GIT_REPO = gitConfig.getUrl()
                    //     def SCM_GIT_BRANCH = scm.branches[0].name

                    //     // SCM_GIT_REPO value only gets expanded in sh
                    //     def SCM_GIT_REPO_VAL = sh(script: "echo ${SCM_GIT_REPO}", returnStdout: true).trim()
                    //     SCM_GIT_REPO_VAL = SCM_GIT_REPO_VAL.replace("https://github.com/","git@github.com:")

                    //     retry(5) {
                    //         if (retry_count > 0) {
                    //             sleep(sleep_time)
                    //         }
                    //         retry_count++
                    //         timeout(time: 1, unit: 'HOURS') {
                    //             forceCleanWS()
                    //         }
                    //         sh "git clone -b ${SCM_GIT_BRANCH} ${SCM_GIT_REPO_VAL} aqa-tests"
                    //     }
                    // } else {
                            def gitConfig = scm.getUserRemoteConfigs().get(0)

                            // Adopt windows machines require env here https://github.com/adoptium/aqa-tests/issues/1803
                            ref_cache = "${env.HOME}/openjdk_cache"
                            retry(5) {
                                if (retry_count > 0) {
                                    sleep(sleep_time)
                                }
                                retry_count++
                                timeout(time: 1, unit: 'HOURS') {
                                    forceCleanWS()
                                }
                                checkout scm: [$class: 'GitSCM',
                                    branches: [[name: "${scm.branches[0].name}"]],
                                    extensions: [
                                        [$class: 'CleanBeforeCheckout'],
                                        [$class: 'CloneOption', reference: ref_cache],
                                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'aqa-tests']],
                                    userRemoteConfigs: [[url: "${gitConfig.getUrl()}"]]
                                ]
                            }
                        //}
                     syncJckMaterial()

                    } catch (Exception e) {
                        println("Exception: " + e.toString())
                        // build result may not be updated correctly at the moment (see https://issues.jenkins.io/browse/JENKINS-56402)
                        // if there is an exception, set currentBuild.result to ABORTED/FAILURE
                        if (e.toString().contains("FlowInterruptedException")) {
                            currentBuild.result = 'ABORTED'
                        } else {
                            currentBuild.result = 'FAILURE'
                        }

                    } 
                    // finally {
                    //     if (params.SLACK_CHANNEL) {
                    //         timeout(time: 5, unit: 'MINUTES') {
                    //             if (currentBuild.result == 'FAILURE') {
                    //                 println("${env.JOB_NAME} #${env.BUILD_NUMBER} result is FAILURE. Checking console log for specific errors...")
                    //                 // create error list and regex can be used
                    //                 List<String> errorList = new ArrayList<String>();
                    //                 errorList.add(".*There is not enough space in the file system.*");
                    //                 errorList.add(".*java.io.IOException: Cannot run program \"nohup\".*");

                    //                 // nightly/weekly builds should not have git clone issue
                    //                 if (!env.JOB_NAME.contains("Grinder") && !env.JOB_NAME.contains("_Personal")) {
                    //                     errorList.add(".*ERROR: Error cloning remote repo.*");
                    //                 }
                    //                 checkErrors(errorList)
                    //             }
                    //         }
                    //     }
                    // }
            }
        } else {
            assert false : "Cannot find key PLATFORM: ${params.PLATFORM} in PLATFORM_MAP: ${PLATFORM_MAP}."
        }
    }
}

// def checkErrors(errorList) {
//     def foundError = ""
//     for (String error : errorList) {
//         if (manager.logContains(error)) {
//             foundError = error;
//             break;
//         }
//     }
//     if (foundError) {
//         def message = "${env.JOB_NAME} #${env.BUILD_NUMBER} failed on ${NODE_NAME} due to ${foundError}: ${env.BUILD_URL} \nSet ${NODE_NAME} temporarily offline! ${env.JENKINS_URL}computer/${NODE_NAME}"
//         def currentNode = Jenkins.instance.getNode(NODE_NAME).toComputer()
//         // set the current node temporarily offline
//         if (currentNode) {
//             println("${message}")
//             currentNode.setTemporarilyOffline(true, new hudson.slaves.OfflineCause.UserCause(User.current(), "${message}"))
//         }
//         // if SLACK_CHANNEL is provided, send the message in slack
//         if (params.SLACK_CHANNEL) {
//             slackSend channel: SLACK_CHANNEL, message: "${message}"
//         }
//     }
// }

def forceCleanWS() {
    try {
        cleanWs disableDeferredWipeout: true, deleteDirs: true
    } catch (Exception e) {
        echo 'Exception: ' + e.toString()
        //cleanWs has issue to delete workspace that contains non-ASCII filename in TKG output https://issues.jenkins.io/browse/JENKINS-33478
        //cannot delete workspace directly. Otherwise, Jenkins job will abort due to missing workspace
        sh "rm -rf ${env.WORKSPACE}/aqa-tests/TKG"
        // call cleanWs() again
        cleanWs disableDeferredWipeout: true, deleteDirs: true
    }
}

def syncJckMaterial(){
        echo "Starting script to sync JCK materials ....."

        def JCK_VERSION = params.JDK_VERSION ?: ""
        def GIT_DEV_BRANCH = params.JCK_GIT_BRANCH ?: ""
        def JAVA_HOME = params.JAVA_HOME ?: ""
        def JAVA_SDK_URL = params.JAVA_SDK_URL ?: ""
        def JCK_GIT_REPO = params.JCK_GIT_REPO ?: ""
        def JCK_VERSION_FLAG = JCK_VERSION ? "-j" : ""
        def GIT_DEV_BRANCH_FLAG = GIT_DEV_BRANCH ? "-gb" : ""
        def JAVA_HOME_FLAG = JAVA_HOME ? "-java" : ""
        def JAVA_SDK_URL_FLAG = JAVA_SDK_URL ? "-sdk_url" : ""
        def EXITCODE = 1

        stage('Build') {
                script {
                        withCredentials([
                            usernamePassword(credentialsId: "${params.ARTIFACTORY_CREDENTIALS}",
						usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_CREDENTIALS'),
                        //using personal GIT ID
                            usernamePassword(credentialsId: "${params.GIT_CREDENTIALS}",
						usernameVariable: 'GIT_USER', passwordVariable: 'GIT_CREDENTIALS')
                        //J9build creds which are secret text
                            //string(credentialsId: "${params.GIT_CREDENTIALS}",variable: 'GIT_CREDENTIALS')
                        ]) {
                                //Clean after finalising the user ID
                                //GIT_USER = "j9build"
                                def currentDirectory = sh(script: 'pwd', returnStdout: true).trim()
                                dir("${currentDirectory}/aqa-tests/jck/jck-semiauto-updater") {
                                    sshagent(credentials:["${params.USER_CREDENTIALS_ID}"], ignoreMissing: true){
                                        def SCRIPT = "./jckupdater.sh ${JCK_VERSION_FLAG} ${JCK_VERSION} -at ${ARTIFACTORY_CREDENTIALS} -u ${GIT_USER} -gt ${GIT_CREDENTIALS} ${GIT_DEV_BRANCH_FLAG} ${GIT_DEV_BRANCH} ${JAVA_HOME_FLAG} ${JAVA_HOME} ${JAVA_SDK_URL_FLAG} ${JAVA_SDK_URL}"
                                        echo "${SCRIPT}"
                                        EXITCODE = sh(script: "${SCRIPT}", returnStatus: true)
                                        if (EXITCODE == 2) {
                                            echo "script returned exit code 2, No new update available. Marking the job as SUCCESS. "
                                        } else if (EXITCODE == 0) {
                                            echo "script returned exit code 0, new update is available and PR is created, proceeding to Stage 2."
                                        } else {
                                            error("script failed with exit code ${EXITCODE}")
                                        }
                                    }
                                   
                                }
                        }
                    }
                }
        stage('SanityTest') {
                script{
                    if ( EXITCODE==0){
                        jenkinsfile = load "${WORKSPACE}/aqa-tests/buildenv/jenkins/JenkinsfileBase"
                        jenkinsfile.testBuild()
                    }
                }  
        }
    }


